{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSideBar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResults","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setPhoto","deletePhoto","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToogle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","profile","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","setMainPhoto","p","activityStore","loadFollowings","loadUserActivities","reaction","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","DropdownMenu","Link","icon","onClick","vertical","size","width","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityItemList","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupActivities","group","sub","ActivityListItemPlaceholder","Placeholder","marginTop","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MytextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","divided","Extra","ActivityDetailedSideBar","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","panes","menuItem","pane","Tab","Pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","CardHeader","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","boderColor","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","isCurrentUser","target","setTarget","GridColumn","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Number","Statistic","followingCount","Divider","PrivateRoute","Component","component","rest","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","useLocation","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.0d737f24.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResults<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination){\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber\r\n    pageSize\r\n\r\n    constructor(pageNumber = 1, pageSize = 2){\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResults } from \"../models/pagination\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n};\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use((config) => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n});\r\n\r\naxios.interceptors.response.use(\r\n    async (response) => {\r\n        if(process.env.NODE_ENV === 'development') await sleep(1000);\r\n        const pagination = response.headers['pagination'];\r\n        if (pagination) {\r\n            response.data = new PaginatedResults(response.data, JSON.parse(pagination));\r\n            return response as AxiosResponse<PaginatedResults<any>>;\r\n        }\r\n        return response;\r\n    },\r\n    (error: AxiosError) => {\r\n        const { data, status, config } = error.response!;\r\n        switch (status) {\r\n            case 400:\r\n                if (typeof data === \"string\") {\r\n                    toast.error(data);\r\n                }\r\n                if (config.method === \"get\" && data.errors.hasOwnProperty(\"id\")) {\r\n                    history.push(\"/not-found\");\r\n                }\r\n                if (data.errors) {\r\n                    const modalStateErrors = [];\r\n                    for (const key in data.errors) {\r\n                        if (data.errors[key]) {\r\n                            modalStateErrors.push(data.errors[key]);\r\n                        }\r\n                    }\r\n                    throw modalStateErrors.flat();\r\n                }\r\n                break;\r\n\r\n            case 401:\r\n                toast.error(\"unauthorized\");\r\n                break;\r\n\r\n            case 404:\r\n                history.push(\"/not-found\");\r\n                toast.error(\"not found\");\r\n                break;\r\n\r\n            case 500:\r\n                store.commonStore.setServerError(data);\r\n                history.push(\"/server-error\");\r\n                break;\r\n        }\r\n\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data; // * Returns data from the request\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) =>\r\n        axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n};\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResults<Activity[]>>(\"/activities\", {params})\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) =>\r\n        requests.post<void>(\"/activities\", activity),\r\n    update: (activity: ActivityFormValues) =>\r\n        requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {}),\r\n};\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>(\"/account\"),\r\n    login: (user: UserFormValues) => requests.post<User>(\"/account/login\", user),\r\n    register: (user: UserFormValues) =>\r\n        requests.post<User>(\"/account/register\", user),\r\n};\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append(\"File\", file);\r\n        return axios.post<Photo>(\"photos\", formData, {\r\n            headers: { \"Content-type\": \"multipart/form-data\" },\r\n        });\r\n    },\r\n    setPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateFollowing: (username: string) =>\r\n        requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`follow/${username}?predicate=${predicate}`),\r\n    \r\n    listActivities: (username: string, predicate: string) => \r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n};\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles,\r\n};\r\n\r\nexport default agent;\r\n","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues){\r\n        Object.assign(this, init);\r\n    }\r\n}\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues){\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams; \r\n    }\r\n    \r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !==  'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                \r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort(\r\n            (a, b) => a.date!.getTime() - b.date!.getTime()\r\n        );\r\n    }\r\n\r\n    get groupActivities(){\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MM yyyy')\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity]\r\n                return activities\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach((activity) => {\r\n                this.setActivity(activity);\r\n                \r\n            });\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    };\r\n\r\n    setPagination = (pagination : Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity\r\n        } else {\r\n            this.setLoadingInitial(false)\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error)\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find( x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n                this.activityRegistry.set(activity.id, activity);\r\n    };\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    \r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    };\r\n\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity};\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = activity as Activity; \r\n                }\r\n                \r\n\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    };\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a=> a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToogle = async () => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}\r\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n        \r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate); \r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    setActiveTab = (activeTab: number) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n    get isCurrentUser(){\r\n        if (store.userStore.user && this.profile){\r\n            return store.userStore.user.username === this.profile.username\r\n        }\r\n        return false;\r\n    }\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false)\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos = this.profile.photos.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false)\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn(){\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        }\r\n        catch (error){\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        }\r\n        catch (error){\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user)  this.user.image = image;\r\n        \r\n    }\r\n}\r\n","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore\r\n    commonStore: CommonStore\r\n    userStore: UserStore,\r\n    modalStore: ModalStore,\r\n    profileStore: ProfileStore,\r\n    commentStore: CommentStore\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport const useStore = () => {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null\r\n    token: string | null = window.localStorage.getItem('jwt')\r\n    appLoaded = false\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean\r\n    body: JSX.Element | null\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true\r\n        this.modal.body = content\r\n\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false\r\n        this.modal.body = null\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n            \r\n            this.hubConnection.start().catch(error => console.log(\"Error establishing the connection: \", error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => { \r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            });\r\n\r\n            this.hubConnection.on('RecieveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log(\"Error stopping connection: \", error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke(\"SendComment\", values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown, DropdownMenu } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\n\r\nconst NavBar = () => {\r\n    const { userStore: { user, logout } } = useStore();\r\n    return (\r\n        <Menu inverted fixed=\"top\">\r\n            <Container>\r\n                <Menu.Item as={NavLink} to=\"/\" exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to=\"/activities\" name=\"Activities\" />\r\n                <Menu.Item as={NavLink} to=\"/errors\" name=\"Errors\" />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to=\"/createActivity\" positive content=\"Create Activity\" />\r\n                </Menu.Item>\r\n                <Menu.Item position=\"right\">\r\n                    <Image src={user?.image || '/'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <DropdownMenu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </DropdownMenu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default observer(NavBar);","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport Calendar from 'react-calendar'\r\nimport { Header, Menu } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\n\r\nconst ActivityFilters = () => {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size=\"large\" style={{ width: '100%' }}>\r\n                <Header icon=\"filter\" attached color='teal' content=\"Filters\" />\r\n                <Menu.Item content='All activities' active={predicate.has('all')}  onClick={() => setPredicate('all', 'true')}/>\r\n                <Menu.Item content=\"I'm going\"  active={predicate.has('isGoing')}  onClick={() => setPredicate('isGoing', 'true')}/>\r\n                <Menu.Item content=\"I'm hosting\" active={predicate.has('isHosting')} onClick={() => setPredicate('is Hosting', 'true')}/>\r\n            </Menu>\r\n            <Header />\r\n            <Calendar onChange={(date) => setPredicate('startDate', date as Date)} value={predicate.get('startDate') || new Date()} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityFilters)","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nconst FollowButton: React.FC<Props> = ({ profile }) => {\r\n    const { profileStore, userStore } = useStore();\r\n    const { updateFollowing, loading } = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    const handleFollow = (e: SyntheticEvent, username: string) => {\r\n        e.preventDefault();\r\n        profile.following\r\n            ? updateFollowing(username, false)\r\n            : updateFollowing(username, true);\r\n    };\r\n    return (\r\n        <Reveal animated=\"move\">\r\n            <Reveal.Content visible style={{ width: \"100%\" }}>\r\n                <Button\r\n                    fluid\r\n                    color=\"teal\"\r\n                    content={profile.following ? \"Following\" : \"Not following\"}\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: \"100%\" }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? \"red\" : \"green\"}\r\n                    content={profile.following ? \"Unfollow\" : \"Follow\"}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    );\r\n};\r\n\r\nexport default observer(FollowButton);\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\n\r\nconst ProfileCard: React.FC<Props> = ({profile}) => {\r\n    return(\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'}/>\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>Bio goes here</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name=\"user\"/>\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile}/>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileCard)","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nconst ActivityListItemAttendee: React.FC<Props> = ({ attendees }) => {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup hoverable key={attendee.username} trigger={\r\n                    <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                        <Image \r\n                            size=\"mini\" \r\n                            circular \r\n                            src={attendee.image || '/assets/user.png'}\r\n                            bordered\r\n                            style={attendee.following ? styles : null}  />\r\n                    </List.Item>\r\n                }>\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityListItemAttendee)","import { format } from \"date-fns\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nconst ActivityItemList = ({ activity }: Props) => {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && (\r\n                    <Label\r\n                        attached=\"top\"\r\n                        color=\"red\"\r\n                        content=\"Cancelled\"\r\n                        style={{ textAlign: \"center\" }}\r\n                    />\r\n                )}\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image\r\n                            style={{ marginBottom: \"30\" }}\r\n                            size=\"tiny\"\r\n                            circular\r\n                            src={activity.host?.image || \"/assets/user.png\"}\r\n                        />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>\r\n                                Hosted by{\" \"}\r\n                                <Link to={`/profiles/${activity.host?.displayName}`}>\r\n                                    {activity.host?.displayName}\r\n                                </Link>\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color=\"orange\">\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color=\"green\">\r\n                                        You are going to this event\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name=\"clock\" /> {format(activity.date!, \"dd MMMm yyyy h:mm aa\")}\r\n                    <Icon name=\"marker\" /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color=\"teal\"\r\n                    floated=\"right\"\r\n                    content=\"View\"\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default ActivityItemList;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport {Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityItemList from \"./ActivityListItem\";\r\n\r\n\r\nconst ActivityList = () => {\r\n    const { activityStore } = useStore();\r\n    const { groupActivities } = activityStore;\r\n\r\n\r\n    return (\r\n        <>\r\n            {groupActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map((activity) => (\r\n                        <ActivityItemList key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default observer(ActivityList);\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nconst ActivityListItemPlaceholder = () => {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default ActivityListItemPlaceholder","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\n\r\nconst ActivityDashboard = () => {\r\n    const { activityStore } = useStore()\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    const handleGetNext = () => {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size === 0) loadActivities()\r\n    }, [activityRegistry.size, activityStore, loadActivities]);\r\n\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width=\"10\">\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={\r\n                            !loadingNext &&\r\n                            !!pagination &&\r\n                            pagination.currentPage < pagination.totalPages\r\n                        }\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width=\"6\">\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width=\"10\">\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDashboard);\r\n","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\n\r\ninterface Props {\r\n    placeholder: string\r\n    name: string\r\n    type?: string\r\n    label?: string\r\n}\r\n\r\nconst MyTextInput: React.FC<Props> = (props) =>{\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n\r\n}\r\n\r\nexport default MyTextInput","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst LoginForm = () => {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: \"\", password: \"\", error: null }}\r\n            onSubmit={(values, { setErrors }) =>\r\n                userStore\r\n                    .login(values)\r\n                    .catch((error) => setErrors({ error: \"Invalid email or password\" }))\r\n            }\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign=\"center\"/>\r\n                    <MyTextInput name=\"email\" placeholder=\"Email\" />\r\n                    <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\" />\r\n                    <ErrorMessage \r\n                        name='error' render={() => <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}/>\r\n                    <Button\r\n                        loading={isSubmitting}\r\n                        positive\r\n                        content=\"Login\"\r\n                        type=\"Submit\"\r\n                        fluid\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default observer(LoginForm);\r\n","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any\r\n}\r\n\r\nconst ValidationErrors: React.FC<Props> = (props) => {\r\n    return(\r\n        <Message error>\r\n            {props.errors && (\r\n                <Message.List>\r\n                    {props.errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>\r\n                            {err}\r\n                        </Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}\r\n\r\nexport default ValidationErrors;","import { ErrorMessage, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\"\r\nimport { Button, Form, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\nconst RegisterForm = () => {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: \"\", username: \"\", email: \"\", password: \"\", error: null }}\r\n            onSubmit={(values, { setErrors }) =>\r\n                userStore\r\n                    .register(values)\r\n                    .catch((error) => setErrors({ error }))\r\n            }\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form className=\"ui form error\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign=\"center\" />\r\n                    <MyTextInput name=\"displayName\" placeholder=\"Display Name\" />\r\n                    <MyTextInput name=\"username\" placeholder=\"Username\" />\r\n                    <MyTextInput name=\"email\" placeholder=\"Email\" />\r\n                    <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\" />\r\n                    <ErrorMessage\r\n                        name='error' render={() => <ValidationErrors errors={errors.error}/>} />\r\n                    <Button\r\n                        disabled={!isValid || !dirty || isSubmitting}\r\n                        loading={isSubmitting}\r\n                        positive\r\n                        content=\"Register\"\r\n                        type=\"Submit\"\r\n                        fluid\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default observer(RegisterForm)","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Header, Segment, Image, Button } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nconst HomePage = () => {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign=\"center\" vertical className=\"masthead\">\r\n            <Container text>\r\n                <Header as=\"h1\" inverted>\r\n                    <Image\r\n                        size=\"massive\"\r\n                        src=\"/assets/logo.png\"\r\n                        alt=\"logo\"\r\n                        style={{ marginBottom: 12 }}\r\n                    />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as=\"h2\" inverted content=\"Welcome to Reactivities\" />\r\n                        <Button as={Link} to=\"/activities\" size=\"huge\" inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={()=> modalStore.openModal(<LoginForm/>)} size=\"huge\" inverted>\r\n                            Login!\r\n                        </Button>\r\n                        <Button onClick={()=> modalStore.openModal(<RegisterForm/>)} size=\"huge\" inverted>\r\n                            Register!\r\n                        </Button>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    );\r\n};\r\nexport default observer(HomePage);\r\n","import React from 'react'\r\nimport { Dimmer, Loader } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    inverted?: boolean\r\n    content?: string\r\n}\r\n\r\nconst LoadingComponent: React.FC<Props> = ({inverted = true, content = 'Loading...'}) => {\r\n    return(\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content}/>\r\n        </Dimmer>\r\n    )\r\n}\r\n\r\nexport default LoadingComponent","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\n\r\ninterface Props {\r\n    placeholder: string\r\n    name: string\r\n    rows: number\r\n    label?: string\r\n}\r\n\r\nconst MytextArea: React.FC<Props> = (props) =>{\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n\r\n}\r\n\r\nexport default MytextArea","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nconst MySelectInput: React.FC<Props> = (props) => {\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">\r\n                    {meta.error}\r\n                </Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MySelectInput;\r\n","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'}\r\n\r\n]","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, { ReactDatePickerProps } from \"react-datepicker\";\r\n\r\nconst MyDateInput: React.FC<Partial<ReactDatePickerProps>> = (props) => {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={(value) => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">\r\n                    {meta.error}\r\n                </Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MyDateInput;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Segment, Button, Header } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MytextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport {ActivityFormValues } from \"../../../app/models/activity\";\r\n\r\nconst ActivityForm = () => {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const {\r\n        createActivity,\r\n        updateActivity,\r\n        loadActivity,\r\n        loadingInitial,\r\n    } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required(\"the activity title is required\"),\r\n        description: Yup.string().required(\"the activity description is required\"),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required(\"Date is required\").nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            loadActivity(id).then((activity) => setActivity(new ActivityFormValues(activity)));\r\n        }\r\n    }, [id, loadActivity]);\r\n\r\n    const handleFormSubmit = (activity: ActivityFormValues) => {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid(),\r\n            };\r\n            createActivity(newActivity).then(() => {\r\n                history.push(`/activities/${activity.id}`);\r\n            });\r\n        } else {\r\n            updateActivity(activity).then(() =>\r\n                history.push(`/activities/${activity.id}`)\r\n            );\r\n        }\r\n    };\r\n\r\n    if (loadingInitial) return <LoadingComponent content=\"Loading activity...\" />;\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header color=\"teal\" content=\"Activity Details\" />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={(values) => handleFormSubmit(values)}\r\n            >\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n                        <MyTextInput name=\"title\" placeholder=\"Title\" />\r\n                        <MytextArea rows={3} placeholder=\"Description\" name=\"description\" />\r\n                        <MySelectInput\r\n                            options={categoryOptions}\r\n                            placeholder=\"Category\"\r\n                            name=\"category\"\r\n                        />\r\n                        <MyDateInput\r\n                            placeholderText=\"Date\"\r\n                            name=\"date\"\r\n                            showTimeSelect\r\n                            dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n                        />\r\n                        <Header color=\"teal\" content=\"Location Details\" />\r\n                        <MyTextInput placeholder=\"City\" name=\"city\" />\r\n                        <MyTextInput placeholder=\"Venue\" name=\"venue\" />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting}\r\n                            floated=\"right\"\r\n                            positive\r\n                            type=\"submit\"\r\n                            content=\"Submit\"\r\n                        />\r\n                        <Button\r\n                            as={Link}\r\n                            to=\"/activities\"\r\n                            floated=\"right\"\r\n                            type=\"button\"\r\n                            content=\"Cancel\"\r\n                        />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityForm);\r\n","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n\r\n}\r\n\r\nconst ActivityDetailedChat: React.FC<Props> = ({ activityId }) => {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik onSubmit={(values, { resetForm }) =>\r\n                    commentStore.addComment(values).then(() => resetForm())} initialValues={{ body: '' }} validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}>\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className=\"ui form\">\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea placeholder='Enter your comment' rows={2} {...props.field} onKeyPress={e => {\r\n                                            if (e.key === 'Enter' && e.shiftKey) {\r\n                                                return;\r\n                                            }\r\n                                            if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                e.preventDefault();\r\n                                                isValid && handleSubmit();\r\n                                            }\r\n                                        }} />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetailedChat);","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Item, Segment, Image, Label } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nconst activityImageStyle = {\r\n    filter: \"brightness(30%)\",\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: \"absolute\",\r\n    bottom: \"5%\",\r\n    left: \"5%\",\r\n    width: \"100%\",\r\n    height: \"auto\",\r\n    color: \"white\",\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const {\r\n        activityStore: { updateAttendance, loading, cancelActivityToogle },\r\n    } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached=\"top\" style={{ padding: \"0\" }}>\r\n                {activity.isCancelled && (\r\n                    <Label\r\n                        style={{ position: \"absolute\", zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon\r\n                        color=\"red\"\r\n                        content=\"Canclled\"\r\n                    />\r\n                )}\r\n                <Image\r\n                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                    fluid\r\n                    style={activityImageStyle}\r\n                />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size=\"huge\"\r\n                                    content={activity.title}\r\n                                    style={{ color: \"white\" }}\r\n                                />\r\n                                <p>{format(activity.date!, \"dd MMM yyyy\")}</p>\r\n                                <p>\r\n                                    Hosted by{\" \"}\r\n                                    <strong>\r\n                                        <Link to={`/profiles/${activity.host?.username}`}>\r\n                                            {activity.host?.displayName}\r\n                                        </Link>{\" \"}\r\n                                    </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached=\"bottom\">\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? \"green\" : \"red\"}\r\n                            floated=\"left\"\r\n                            basic\r\n                            content={\r\n                                activity.isCancelled\r\n                                    ? \"Re-reactivate Activity\"\r\n                                    : \"Cancel Activity\"\r\n                            }\r\n                            loading={loading}\r\n                            onClick={cancelActivityToogle}\r\n                        />\r\n                        <Button\r\n                            as={Link}\r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`}\r\n                            color=\"orange\"\r\n                            floated=\"right\"\r\n                        >\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>\r\n                        Cancel attendance\r\n                    </Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled} loading={loading} onClick={updateAttendance} color=\"teal\">\r\n                        Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n});\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n                {format(activity.date!, 'dd MM yyyy, HH:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from \"react\";\r\nimport { Segment, List, Label, Item, Image } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign=\"center\"\r\n                style={{ border: \"none\" }}\r\n                attached=\"top\"\r\n                secondary\r\n                inverted\r\n                color=\"teal\"\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? \"Person\" : \"People\"} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map((attendee) => (\r\n                        <Item style={{ position: \"relative\" }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: \"absolute\" }}\r\n                                    color=\"orange\"\r\n                                    ribbon=\"right\"\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                            <Image size=\"tiny\" src={attendee.image || \"/assets/user.png\"} />\r\n                            <Item.Content verticalAlign=\"middle\">\r\n                                <Item.Header as=\"h3\">\r\n                                    <Link to={`/profiles/${attendee.username}`}>\r\n                                        {attendee.displayName}\r\n                                    </Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                    <Item.Extra style={{ color: \"orange\" }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    );\r\n});\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router';\r\nimport {Grid} from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store'\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSideBar from './ActivityDetailedSideBar';\r\n\r\n\r\n\r\nconst ActivityDetails = () => {\r\n    const{activityStore} = useStore();\r\n    const{selectedActivity: activity, loadActivity, loadingInitial , clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            loadActivity(id)\r\n            return () =>{\r\n                clearSelectedActivity();\r\n            }\r\n        }\r\n    }, [id, loadActivity, clearSelectedActivity ]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent/>;\r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity}/>\r\n                <ActivityDetailedInfo activity={activity}/>\r\n                <ActivityDetailedChat activityId={activity.id}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSideBar activity={activity}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetails)","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL\r\n    const [errors, setErrors] = useState(null);\r\n\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + '/buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + '/buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + '/buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + '/buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + '/activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + '/activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n                <ValidationErrors errors={errors}/>\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\r\n\r\nconst NotFound = () => {\r\n    return(\r\n        <Segment placeholder >\r\n            <Header icon>\r\n                <Icon name='search'/>\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default NotFound","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Container, Header, Segment } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\nconst ServerError = () => {\r\n    const {commonStore} = useStore()\r\n\r\n    return(\r\n        <Container>\r\n            <Header as='h1' content='Server Error'/>\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message}/>\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal'/>\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default observer(ServerError)","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store'\r\n\r\nconst ModalContainer = () => {\r\n    const {modalStore} = useStore();\r\n\r\n    return(\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size=\"mini\">\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n\r\n}\r\n\r\nexport default observer(ModalContainer)","import React, {SyntheticEvent, useEffect} from 'react';\r\nimport {observer} from 'mobx-react-lite';\r\nimport {Tab, Grid, Header, Card, Image, TabProps, CardHeader} from 'semantic-ui-react';\r\nimport {Link} from 'react-router-dom';\r\nimport {UserActivity} from '../../app/models/profile';\r\nimport {format} from 'date-fns';\r\nimport {useStore} from '../../app/stores/store';\r\n\r\nconst panes = [\r\n    {menuItem: 'Future Events', pane: {key: 'future'}},\r\n    {menuItem: 'Past Events', pane: {key: 'past'}},\r\n    {menuItem: 'Hosing', pane: {key: 'hosting'}}\r\n];\r\n\r\nconst ProfileActivities = () => {\r\n    const {profileStore} = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e : SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}> \r\n                    <Header floated='left' icon='calendar' content={'Activities'}/>\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab panes={panes} menu={{secondary: true, pointing: true}}\r\n                    onTabChange={(e, data) => handleTabChange(e, data)}/>\r\n                    <br/>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card as={Link} to={`/activities/${activity.id}`} key={activity.id}>\r\n                                <Image src={`/assets/categoryImages/${activity.category}.jpg`} style={{minHeight: 100, objectFit: 'cover'}}/>\r\n                                <Card.Content>\r\n                                    <CardHeader textAlign='center'>{activity.title}</CardHeader>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n\r\n}\r\n\r\nexport default observer(ProfileActivities);","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nconst ProfileFollowings = () => {\r\n    const { profileStore } = useStore();\r\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated=\"left\"\r\n                        icon=\"user\"\r\n                        content={\r\n                            activeTab === 3\r\n                                ? `People following ${profile?.displayName}`\r\n                                : `People ${profile?.displayName} is following`\r\n                        }\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map((profile) => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileFollowings);\r\n","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nconst PhotoWidgetCropper: React.FC<Props> = ({imagePreview, setCropper}) => {\r\n    return(\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n            />\r\n    )\r\n}\r\n\r\nexport default PhotoWidgetCropper;","import React, { useCallback } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { Header, Icon } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nconst PhotoWidgetDropzone: React.FC<Props> = ({setFiles}) => {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        boderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback((acceptedFiles) => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles]);\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge'/>\r\n            <Header content='Drop image here'/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PhotoWidgetDropzone;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nconst PhotoUploadWidget: React.FC<Props> = ({loading, uploadPhoto}) => {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    const onCrop = () => {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default PhotoUploadWidget;","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport {\r\n    Card,\r\n    Header,\r\n    Tab,\r\n    Image,\r\n    Grid,\r\n    Button,\r\n    GridColumn,\r\n} from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nconst ProfilePhotos: React.FC<Props> = ({ profile }) => {\r\n    const [addPhotoMode, setAddPhotoMode] = useState<boolean>(false);\r\n    const {\r\n        profileStore: {\r\n            isCurrentUser,\r\n            uploadPhoto,\r\n            uploading,\r\n            loading,\r\n            setMainPhoto,\r\n            deletePhoto,\r\n        },\r\n    } = useStore();\r\n    const [target, setTarget] = useState(\"\");\r\n\r\n    const handleSetMainPhoto = (\r\n        photo: Photo,\r\n        e: SyntheticEvent<HTMLButtonElement>\r\n    ) => {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    };\r\n\r\n    const handlePhotoUpload = (file: Blob) => {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    };\r\n\r\n    const handleDeletePhoto = (\r\n        photo: Photo,\r\n        e: SyntheticEvent<HTMLButtonElement>\r\n    ) => {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    };\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated=\"left\" icon=\"image\" content=\"Photos\" />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated=\"right\"\r\n                            basic\r\n                            content={addPhotoMode ? \"Cancel\" : \"Add Poto\"}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <GridColumn width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget\r\n                            uploadPhoto={handlePhotoUpload}\r\n                            loading={uploading}\r\n                        />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map((photo) => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color=\"green\"\r\n                                                content=\"Main\"\r\n                                                name={'main' + photo.id}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                disabled={photo.isMain}\r\n                                                onClick={(e) => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                color=\"red\"\r\n                                                icon=\"trash\"\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={(e) => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </GridColumn>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfilePhotos);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\nconst ProfileContent: React.FC<Props> = ({ profile }) => {\r\n    const { profileStore } = useStore();\r\n\r\n    const panes = [\r\n        { menuItem: \"About\", render: () => <Tab.Pane>About Content</Tab.Pane> },\r\n        { menuItem: \"Photos\", render: () => <ProfilePhotos profile={profile} /> },\r\n        { menuItem: \"Events\", render: () => <ProfileActivities/>},\r\n        { menuItem: \"Followers\", render: () => <ProfileFollowings /> },\r\n        { menuItem: \"Following\", render: () => <ProfileFollowings /> },\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition=\"right\"\r\n            panes={panes}\r\n            onTabChange={(e, data) =>\r\n                profileStore.setActiveTab(Number(data.activeIndex))\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default observer(ProfileContent);\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nconst ProfileHeader: React.FC<Props> = ({profile}) => {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={ profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount}/>\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileHeader);","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nconst ProfilePage = () => {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadProfile, loadingProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ProfilePage);","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nconst PrivateRoute: React.FC<Props> = ({component: Component, ...rest}: Props) => {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n\r\n    return(\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/'/> }\r\n        />\r\n    )\r\n\r\n}\r\n\r\nexport default PrivateRoute;","import { Container } from \"semantic-ui-react\";\r\nimport NavBar from \"./NavBar\";\r\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport HomePage from \"../../features/home/HomePage\";\r\nimport ActivityForm from \"../../features/activities/form/ActivityForm\";\r\nimport ActivityDetails from \"../../features/activities/details/ActivityDetails\";\r\nimport TestErrors from \"../../features/errors/TestError\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport NotFound from \"../../features/NotFound\";\r\nimport ServerError from \"../../features/errors/ServerError\"\r\nimport { useStore } from \"../stores/store\";\r\nimport {useEffect} from 'react';\r\nimport LoadingComponent from \"./LoadingComponent\";\r\nimport ModalContainer from \"../common/modals/ModalContainer\";\r\nimport ProfilePage from \"../../features/profiles/ProfilePage\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\n\r\nfunction App() {\r\n  const {commonStore, userStore} = useStore();\r\n  \r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    } else {\r\n      commonStore.setAppLoaded();\r\n    }\r\n    \r\n  }, [commonStore, userStore]);\r\n\r\n  if (!commonStore.setAppLoaded) {\r\n    return <LoadingComponent content='Loading...'/>\r\n  }\r\n  return (\r\n    <>\r\n      <ToastContainer position='bottom-right' hideProgressBar />\r\n      <ModalContainer/>\r\n      <Route exact path='/' component={HomePage} />\r\n      <Route path={('/(.+)')} render={() => (\r\n        <>\r\n          <NavBar />\r\n          <Container style={{ marginTop: \"7em\" }}>\r\n            <Switch>\r\n              <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n              <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n              <PrivateRoute path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n              <PrivateRoute path='/profiles/:username' component={ProfilePage}/>\r\n              <PrivateRoute path='/errors' component={TestErrors} />\r\n              <Route path='/server-error' component={ServerError}/>\r\n              <Route component={NotFound} />\r\n            </Switch>\r\n          </Container>\r\n        </>\r\n      )} />\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router\";\r\n\r\nconst ScrollToTop = () => {\r\n    const {pathname} = useLocation();\r\n    \r\n    useEffect(() => {\r\n        window.scrollTo(0,0);\r\n    }, [pathname])\r\n\r\n    return null;\r\n}\r\n\r\nexport default ScrollToTop;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-calendar/dist/Calendar.css'\r\nimport 'react-toastify/dist/ReactToastify.min.css'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport './app/layout/styles.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport {Router } from 'react-router-dom';\r\nimport {createBrowserHistory } from 'history'\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\nexport const history = createBrowserHistory()\r\nReactDOM.render(\r\n  <StoreContext.Provider value={store}>\r\n    <Router history={history}>\r\n      <ScrollToTop/>\r\n      <App />\r\n    </Router>\r\n  </StoreContext.Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}